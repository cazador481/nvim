snippet try "try catch"
try
{
	$1
}
catch
{
	$2;
};
endsnippet

snippet "^option $" "Moose has" rbA
option $1 => ( 
   is => $2,
   isa => $3,
   default=>$4,
   documentation=>$5,
);
endsnippet

snippet "^\s*DDP $" "Data::Printer" rbA
use Data::Printer; p $1;
endsnippet
snippet "^attr $" "Attribute pod" rbA
=attr $1
$2
=cut

endsnippet

snippet "^hro $" "has ro" rbA
has $1 => ( 
   is => 'ro',
   isa => $2,
   default=>$3,
   documentation=>$4,
);
endsnippet

snippet "^hlazy $" "has lazy" rbA
has $1 => ( 
   is => 'lazy',
   isa => $2,
   default=>$3,
   documentation=>$4,
);
endsnippet

snippet "^has $" "Moose has" rbA
has $1 => ( 
   is => $2,
   isa => $3,
   default=>$4,
   documentation=>$5,
);
endsnippet

snippet method "sub method"
=method $1

${2:Description goes here}

=for Paramters
* ${3: Param goes here}

Returns: 
* ${4: N/A}

=cut

sub $1 
{
	#param checking
    my $check=compile(SELF);
    my ($self$5)=$check->(@_);
}

endsnippet
snippet sub "subroutine"
sub $1 
{
	${2:${VISUAL}}
}
endsnippet

snippet moo_role "role"
package $1;
use strict;
use warnings;
use Moo::Role;

$2

1;
endsnippet

snippet "^#!" "run perl" rbA
#!/home/utils/perl-5.22/5.22.0-016/bin/perl
endsnippet

snippet modulino
use lib '/home/nv/utils/perl-modules/NV-MooX-Modulino/1.0.3/lib/perl5/';

package $1;
use Moo;
use MooX::Options author=>'Edward Ash <eash@nvidia.com>';
with 'NV::MooX::Modulino';
with 'MooX::Log::Any'; # enables ->log from Log::Any, optional
with 'NV::MooX::Modulino::Log4perl'; #enables log4perl, optional
#work around issue with Moox and type tiny  https://github.com/tobyink/p5-type-tiny/pull/27
$Error::TypeTiny::CarpInternal{Method::Generate::Constructor}=1;
$Error::TypeTiny::CarpInternal{Method::Generate::Accessor}=1;
$Error::TypeTiny::CarpInternal{MooX::Options::Role}=1;

#this gets run 
sub run  {
    my $self=shift;
} 


$1->_modulino({},caller);
endsnippet



### dbix
snippet belongs_to "DBIX"
=head2 $1

Type: belongs_to

Related object: L<$2>

=cut

__PACKAGE__->belongs_to(
  "$1",
  "$2",
  { 'foreign.id' => "self.$3" },
);
endsnippet


snippet has_many "DBIX"
=head2 $1

Type: has_many

Relate object: L<$2>

=cut

__PACKAGE__->has_many(
    '$1',
    '$2',
    {'foreign.$3'=>'self.id'},
);

endsnippet

snippet check "Type::Tiny check"
my ($self,$args) = $check->(@_);
endsnippet

